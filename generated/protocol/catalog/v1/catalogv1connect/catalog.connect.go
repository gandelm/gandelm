// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protocol/catalog/v1/catalog.proto

package catalogv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/gandelm/gandelm/generated/protocol/catalog/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CatalogServiceName is the fully-qualified name of the CatalogService service.
	CatalogServiceName = "gandelm.catalog.v1.CatalogService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CatalogServiceListProcedure is the fully-qualified name of the CatalogService's List RPC.
	CatalogServiceListProcedure = "/gandelm.catalog.v1.CatalogService/List"
	// CatalogServiceGetProcedure is the fully-qualified name of the CatalogService's Get RPC.
	CatalogServiceGetProcedure = "/gandelm.catalog.v1.CatalogService/Get"
	// CatalogServiceCreateProcedure is the fully-qualified name of the CatalogService's Create RPC.
	CatalogServiceCreateProcedure = "/gandelm.catalog.v1.CatalogService/Create"
	// CatalogServiceUpdateProcedure is the fully-qualified name of the CatalogService's Update RPC.
	CatalogServiceUpdateProcedure = "/gandelm.catalog.v1.CatalogService/Update"
	// CatalogServiceDeleteProcedure is the fully-qualified name of the CatalogService's Delete RPC.
	CatalogServiceDeleteProcedure = "/gandelm.catalog.v1.CatalogService/Delete"
)

// CatalogServiceClient is a client for the gandelm.catalog.v1.CatalogService service.
type CatalogServiceClient interface {
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
}

// NewCatalogServiceClient constructs a client for the gandelm.catalog.v1.CatalogService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCatalogServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CatalogServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	catalogServiceMethods := v1.File_protocol_catalog_v1_catalog_proto.Services().ByName("CatalogService").Methods()
	return &catalogServiceClient{
		list: connect.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+CatalogServiceListProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+CatalogServiceGetProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+CatalogServiceCreateProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v1.UpdateRequest, v1.UpdateResponse](
			httpClient,
			baseURL+CatalogServiceUpdateProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("Update")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+CatalogServiceDeleteProcedure,
			connect.WithSchema(catalogServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
	}
}

// catalogServiceClient implements CatalogServiceClient.
type catalogServiceClient struct {
	list   *connect.Client[v1.ListRequest, v1.ListResponse]
	get    *connect.Client[v1.GetRequest, v1.GetResponse]
	create *connect.Client[v1.CreateRequest, v1.CreateResponse]
	update *connect.Client[v1.UpdateRequest, v1.UpdateResponse]
	delete *connect.Client[v1.DeleteRequest, v1.DeleteResponse]
}

// List calls gandelm.catalog.v1.CatalogService.List.
func (c *catalogServiceClient) List(ctx context.Context, req *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Get calls gandelm.catalog.v1.CatalogService.Get.
func (c *catalogServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Create calls gandelm.catalog.v1.CatalogService.Create.
func (c *catalogServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls gandelm.catalog.v1.CatalogService.Update.
func (c *catalogServiceClient) Update(ctx context.Context, req *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls gandelm.catalog.v1.CatalogService.Delete.
func (c *catalogServiceClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// CatalogServiceHandler is an implementation of the gandelm.catalog.v1.CatalogService service.
type CatalogServiceHandler interface {
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
}

// NewCatalogServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCatalogServiceHandler(svc CatalogServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	catalogServiceMethods := v1.File_protocol_catalog_v1_catalog_proto.Services().ByName("CatalogService").Methods()
	catalogServiceListHandler := connect.NewUnaryHandler(
		CatalogServiceListProcedure,
		svc.List,
		connect.WithSchema(catalogServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceGetHandler := connect.NewUnaryHandler(
		CatalogServiceGetProcedure,
		svc.Get,
		connect.WithSchema(catalogServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceCreateHandler := connect.NewUnaryHandler(
		CatalogServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(catalogServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceUpdateHandler := connect.NewUnaryHandler(
		CatalogServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(catalogServiceMethods.ByName("Update")),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceDeleteHandler := connect.NewUnaryHandler(
		CatalogServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(catalogServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	return "/gandelm.catalog.v1.CatalogService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CatalogServiceListProcedure:
			catalogServiceListHandler.ServeHTTP(w, r)
		case CatalogServiceGetProcedure:
			catalogServiceGetHandler.ServeHTTP(w, r)
		case CatalogServiceCreateProcedure:
			catalogServiceCreateHandler.ServeHTTP(w, r)
		case CatalogServiceUpdateProcedure:
			catalogServiceUpdateHandler.ServeHTTP(w, r)
		case CatalogServiceDeleteProcedure:
			catalogServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCatalogServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCatalogServiceHandler struct{}

func (UnimplementedCatalogServiceHandler) List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gandelm.catalog.v1.CatalogService.List is not implemented"))
}

func (UnimplementedCatalogServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gandelm.catalog.v1.CatalogService.Get is not implemented"))
}

func (UnimplementedCatalogServiceHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gandelm.catalog.v1.CatalogService.Create is not implemented"))
}

func (UnimplementedCatalogServiceHandler) Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gandelm.catalog.v1.CatalogService.Update is not implemented"))
}

func (UnimplementedCatalogServiceHandler) Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gandelm.catalog.v1.CatalogService.Delete is not implemented"))
}
