// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protocol/label/v1/label.proto

package labelv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/gandelm/gandelm/generated/protocol/label/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LabelServiceName is the fully-qualified name of the LabelService service.
	LabelServiceName = "gandelm.label.v1.LabelService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LabelServiceListProcedure is the fully-qualified name of the LabelService's List RPC.
	LabelServiceListProcedure = "/gandelm.label.v1.LabelService/List"
	// LabelServiceGetProcedure is the fully-qualified name of the LabelService's Get RPC.
	LabelServiceGetProcedure = "/gandelm.label.v1.LabelService/Get"
	// LabelServiceCreateProcedure is the fully-qualified name of the LabelService's Create RPC.
	LabelServiceCreateProcedure = "/gandelm.label.v1.LabelService/Create"
	// LabelServiceDeleteProcedure is the fully-qualified name of the LabelService's Delete RPC.
	LabelServiceDeleteProcedure = "/gandelm.label.v1.LabelService/Delete"
)

// LabelServiceClient is a client for the gandelm.label.v1.LabelService service.
type LabelServiceClient interface {
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
}

// NewLabelServiceClient constructs a client for the gandelm.label.v1.LabelService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLabelServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LabelServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	labelServiceMethods := v1.File_protocol_label_v1_label_proto.Services().ByName("LabelService").Methods()
	return &labelServiceClient{
		list: connect.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+LabelServiceListProcedure,
			connect.WithSchema(labelServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+LabelServiceGetProcedure,
			connect.WithSchema(labelServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+LabelServiceCreateProcedure,
			connect.WithSchema(labelServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+LabelServiceDeleteProcedure,
			connect.WithSchema(labelServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
	}
}

// labelServiceClient implements LabelServiceClient.
type labelServiceClient struct {
	list   *connect.Client[v1.ListRequest, v1.ListResponse]
	get    *connect.Client[v1.GetRequest, v1.GetResponse]
	create *connect.Client[v1.CreateRequest, v1.CreateResponse]
	delete *connect.Client[v1.DeleteRequest, v1.DeleteResponse]
}

// List calls gandelm.label.v1.LabelService.List.
func (c *labelServiceClient) List(ctx context.Context, req *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Get calls gandelm.label.v1.LabelService.Get.
func (c *labelServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Create calls gandelm.label.v1.LabelService.Create.
func (c *labelServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Delete calls gandelm.label.v1.LabelService.Delete.
func (c *labelServiceClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// LabelServiceHandler is an implementation of the gandelm.label.v1.LabelService service.
type LabelServiceHandler interface {
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
}

// NewLabelServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLabelServiceHandler(svc LabelServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	labelServiceMethods := v1.File_protocol_label_v1_label_proto.Services().ByName("LabelService").Methods()
	labelServiceListHandler := connect.NewUnaryHandler(
		LabelServiceListProcedure,
		svc.List,
		connect.WithSchema(labelServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	labelServiceGetHandler := connect.NewUnaryHandler(
		LabelServiceGetProcedure,
		svc.Get,
		connect.WithSchema(labelServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	labelServiceCreateHandler := connect.NewUnaryHandler(
		LabelServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(labelServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	labelServiceDeleteHandler := connect.NewUnaryHandler(
		LabelServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(labelServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	return "/gandelm.label.v1.LabelService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LabelServiceListProcedure:
			labelServiceListHandler.ServeHTTP(w, r)
		case LabelServiceGetProcedure:
			labelServiceGetHandler.ServeHTTP(w, r)
		case LabelServiceCreateProcedure:
			labelServiceCreateHandler.ServeHTTP(w, r)
		case LabelServiceDeleteProcedure:
			labelServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLabelServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLabelServiceHandler struct{}

func (UnimplementedLabelServiceHandler) List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gandelm.label.v1.LabelService.List is not implemented"))
}

func (UnimplementedLabelServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gandelm.label.v1.LabelService.Get is not implemented"))
}

func (UnimplementedLabelServiceHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gandelm.label.v1.LabelService.Create is not implemented"))
}

func (UnimplementedLabelServiceHandler) Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gandelm.label.v1.LabelService.Delete is not implemented"))
}
