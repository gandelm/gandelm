// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protocol/github_webhook/v1/github_webhook.proto

package github_webhookv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/gandelm/gandelm/generated/protocol/github_webhook/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GitHubWebhookServiceName is the fully-qualified name of the GitHubWebhookService service.
	GitHubWebhookServiceName = "gandelm.github_webhook.v1.GitHubWebhookService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GitHubWebhookServiceHandleWebhookProcedure is the fully-qualified name of the
	// GitHubWebhookService's HandleWebhook RPC.
	GitHubWebhookServiceHandleWebhookProcedure = "/gandelm.github_webhook.v1.GitHubWebhookService/HandleWebhook"
)

// GitHubWebhookServiceClient is a client for the gandelm.github_webhook.v1.GitHubWebhookService
// service.
type GitHubWebhookServiceClient interface {
	HandleWebhook(context.Context, *connect.Request[v1.GitHubWebhookRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewGitHubWebhookServiceClient constructs a client for the
// gandelm.github_webhook.v1.GitHubWebhookService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGitHubWebhookServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GitHubWebhookServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	gitHubWebhookServiceMethods := v1.File_protocol_github_webhook_v1_github_webhook_proto.Services().ByName("GitHubWebhookService").Methods()
	return &gitHubWebhookServiceClient{
		handleWebhook: connect.NewClient[v1.GitHubWebhookRequest, emptypb.Empty](
			httpClient,
			baseURL+GitHubWebhookServiceHandleWebhookProcedure,
			connect.WithSchema(gitHubWebhookServiceMethods.ByName("HandleWebhook")),
			connect.WithClientOptions(opts...),
		),
	}
}

// gitHubWebhookServiceClient implements GitHubWebhookServiceClient.
type gitHubWebhookServiceClient struct {
	handleWebhook *connect.Client[v1.GitHubWebhookRequest, emptypb.Empty]
}

// HandleWebhook calls gandelm.github_webhook.v1.GitHubWebhookService.HandleWebhook.
func (c *gitHubWebhookServiceClient) HandleWebhook(ctx context.Context, req *connect.Request[v1.GitHubWebhookRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.handleWebhook.CallUnary(ctx, req)
}

// GitHubWebhookServiceHandler is an implementation of the
// gandelm.github_webhook.v1.GitHubWebhookService service.
type GitHubWebhookServiceHandler interface {
	HandleWebhook(context.Context, *connect.Request[v1.GitHubWebhookRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewGitHubWebhookServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGitHubWebhookServiceHandler(svc GitHubWebhookServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gitHubWebhookServiceMethods := v1.File_protocol_github_webhook_v1_github_webhook_proto.Services().ByName("GitHubWebhookService").Methods()
	gitHubWebhookServiceHandleWebhookHandler := connect.NewUnaryHandler(
		GitHubWebhookServiceHandleWebhookProcedure,
		svc.HandleWebhook,
		connect.WithSchema(gitHubWebhookServiceMethods.ByName("HandleWebhook")),
		connect.WithHandlerOptions(opts...),
	)
	return "/gandelm.github_webhook.v1.GitHubWebhookService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GitHubWebhookServiceHandleWebhookProcedure:
			gitHubWebhookServiceHandleWebhookHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGitHubWebhookServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGitHubWebhookServiceHandler struct{}

func (UnimplementedGitHubWebhookServiceHandler) HandleWebhook(context.Context, *connect.Request[v1.GitHubWebhookRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gandelm.github_webhook.v1.GitHubWebhookService.HandleWebhook is not implemented"))
}
